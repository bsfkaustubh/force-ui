/*! For license information please see components-radio-button-radio-button-stories.9a78f0f1.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_bsf_force_ui=self.webpackChunk_bsf_force_ui||[]).push([[9297],{"./src/components/radio-button/radio-button.stories.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SimpleRadioInline:function(){return SimpleRadioInline},SimpleRadioMd:function(){return SimpleRadioMd},SimpleRadioMulti:function(){return SimpleRadioMulti},SimpleRadioSwitch:function(){return SimpleRadioSwitch},SimpleRadioWithInfo:function(){return SimpleRadioWithInfo},TileRadio:function(){return TileRadio},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return radio_button_stories}});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),radio_button=__webpack_require__("./src/components/radio-button/radio-button.jsx"),plus=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/plus.js");const Smile=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("Smile",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M8 14s1.5 2 4 2 4-2 4-2",key:"1y1vjs"}],["line",{x1:"9",x2:"9.01",y1:"9",y2:"9",key:"yxxnd0"}],["line",{x1:"15",x2:"15.01",y1:"9",y2:"9",key:"1p4y9e"}]]);var badge=__webpack_require__("./src/components/badge/badge.jsx"),radio_button_stories={title:"Atoms/RadioButton",component:radio_button.A,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{name:{description:"The name prop used for form control.",table:{type:{summary:"string"}}},style:{description:'Defines the style of the RadioGroup group. Options are "simple" and "tile".',control:{type:"select"},options:["simple","tile"],table:{defaultValue:{summary:"simple"}}},size:{control:{type:"select"},options:["sm","md"],description:"Defines the size of the Select component.",defaultValue:"md"},as:{description:"Specifies the wrapper element for the radio button group.",control:{type:"text"},table:{type:{summary:"string | React.ElementType"},defaultValue:{summary:"div"}}},value:{description:"The currently selected value in the RadioGroup group.",table:{type:{summary:"string"}}},defaultValue:{description:"The default value to be selected in the RadioGroup group.",table:{type:{summary:"string"}}},gapClassName:{description:"To customize the gap between Radio Buttons.",control:{type:"text"},defaultValue:"gap-2"},by:{description:'Used to compare the checked value. Typically "id".',table:{type:{summary:"string"},defaultValue:{summary:"id"}}},disableGroup:{description:"Disables all buttons in the group when set to true.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},vertical:{description:"Arranges radio buttons vertically.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},columns:{description:"Sets the number of columns for arranging the radio buttons.",control:"number",table:{type:{summary:"number"},defaultValue:{summary:4}}},multiSelection:{description:"Allows selecting more than one option.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},onChange:{description:"Event handler function to listen to the change.",action:"changed",table:{type:{summary:"function"}}},label:{description:"`RadioButton.Button` : Object containing heading and description for each RadioButton.",control:{type:"object"},defaultValue:{heading:"Option",description:"Description"},table:{type:{summary:"object"},defaultValue:{summary:"{ heading: 'Option', description: 'Description' }"}}},info:{description:"`RadioButton.Button` : Object containing heading and description for each RadioButton Info.",control:{type:"object"},defaultValue:{heading:"Info",description:"Description"},table:{type:{summary:"object"},defaultValue:{summary:"{ heading: 'Info', description: 'Description' }"}}},borderOn:{description:"`RadioButton.Button` : Adds a border around the button.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},borderOnActive:{description:"`RadioButton.Button` : Adds a border around the button when the button is Checked/Selected.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}}},minWidth:{description:"`RadioButton.Button` : Adds minimum width to the button.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},useSwitch:{description:"`RadioButton.Button` :Uses a switch for selection.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},icon:{description:"`RadioButton.Button` :Custom icon component to be displayed.",control:{type:"text"},defaultValue:null},inlineIcon:{description:"`RadioButton.Button` : Positions icon inline to the label.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},hideSelection:{description:"`RadioButton.Button` : Positions icon inline to the label.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},reversePosition:{description:"`RadioButton.Button` : Positions icon inline to the label.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},badgeItem:{description:"`RadioButton.Button` : Badge Item to be displayed.",control:{type:"text"},defaultValue:null},disabled:{description:"`RadioButton.Button` : Disables radio button.",control:"boolean",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},buttonWrapperClasses:{description:"`RadioButton.Button` : Custom classes to be applied to the button wrapper.",control:{type:"text"},defaultValue:"bg-white"}}};const Template=args=>{const[value,setValue]=(0,react.useState)(args.value||args.defaultValue);return(0,jsx_runtime.jsx)(radio_button.A.Group,{...args,value:value,columns:args.columns??"tile"===args.style?6:3,onChange:val=>{setValue(val),args.onChange(val)},children:[1,2,3,4,5,6].map((num=>"tile"===args.style?(0,jsx_runtime.jsx)(radio_button.A.Button,{value:`option${num}`,disabled:args.disabled,children:(0,jsx_runtime.jsx)(plus.A,{})},num):(0,jsx_runtime.jsx)(radio_button.A.Button,{value:`option${num}`,label:args.label??{heading:`Option ${num}`,description:`Description ${num}`},borderOn:args.borderOn,borderOnActive:args.borderOnActive,minWidth:args.minWidth,info:args.info,disabled:args.disabled,useSwitch:args.useSwitch,icon:args.icon?(0,jsx_runtime.jsx)(Smile,{}):null,inlineIcon:args.inlineIcon,hideSelection:args.hideSelection,reversePosition:args.reversePosition,badgeItem:args.badgeItem?(0,jsx_runtime.jsx)(badge.A,{type:"rounded",label:args.badgeItem,icon:null,className:"mr-2",size:"sm",variant:"green",closable:!1}):null},num)))})},SimpleRadioMd=Template.bind({});SimpleRadioMd.args={},SimpleRadioMd.storyName="Simple Radio Group - size md";const SimpleRadioMulti=Template.bind({});SimpleRadioMulti.args={borderOn:!0,icon:!0,multiSelection:!0},SimpleRadioMulti.storyName="Multi Selection";const TileRadio=Template.bind({});TileRadio.args={style:"tile",columns:6},TileRadio.storyName="Tile Radio Group";const SimpleRadioSwitch=Template.bind({});SimpleRadioSwitch.args={borderOn:!0,useSwitch:!0,multiSelection:!0},SimpleRadioSwitch.storyName="Switch Selection";const SimpleRadioInline=Template.bind({});SimpleRadioInline.args={borderOn:!0,icon:!0,inlineIcon:!0,label:{heading:"Option"},multiSelection:!0},SimpleRadioInline.storyName="Inline Icon";const SimpleRadioWithInfo=Template.bind({});SimpleRadioWithInfo.args={borderOn:!0,label:{heading:"Option",description:"Description"},info:{heading:"Info",description:"Description"}},SimpleRadioWithInfo.storyName="With Info";const __namedExportsOrder=["SimpleRadioMd","SimpleRadioMulti","TileRadio","SimpleRadioSwitch","SimpleRadioInline","SimpleRadioWithInfo"];SimpleRadioMd.parameters={...SimpleRadioMd.parameters,docs:{...SimpleRadioMd.parameters?.docs,source:{originalSource:'args => {\n  const [value, setValue] = useState(args.value || args.defaultValue);\n  return <RadioButton.Group {...args} value={value} columns={args.columns ?? args.style === \'tile\' ? 6 : 3} onChange={val => {\n    setValue(val);\n    args.onChange(val);\n  }}>\n            {[1, 2, 3, 4, 5, 6].map(num => args.style === \'tile\' ? <RadioButton.Button value={`option${num}`} key={num} disabled={args.disabled}>\n                        <Plus />\n                    </RadioButton.Button> : <RadioButton.Button key={num} value={`option${num}`} label={args.label ?? {\n      heading: `Option ${num}`,\n      description: `Description ${num}`\n    }} borderOn={args.borderOn} borderOnActive={args.borderOnActive} minWidth={args.minWidth} info={args.info} disabled={args.disabled} useSwitch={args.useSwitch} icon={args.icon ? <Smile /> : null} inlineIcon={args.inlineIcon} hideSelection={args.hideSelection} reversePosition={args.reversePosition} badgeItem={args.badgeItem ? <Badge type="rounded" label={args.badgeItem} icon={null} className="mr-2" size="sm" variant="green" closable={false} /> : null} />)}\n        </RadioButton.Group>;\n}',...SimpleRadioMd.parameters?.docs?.source}}},SimpleRadioMulti.parameters={...SimpleRadioMulti.parameters,docs:{...SimpleRadioMulti.parameters?.docs,source:{originalSource:'args => {\n  const [value, setValue] = useState(args.value || args.defaultValue);\n  return <RadioButton.Group {...args} value={value} columns={args.columns ?? args.style === \'tile\' ? 6 : 3} onChange={val => {\n    setValue(val);\n    args.onChange(val);\n  }}>\n            {[1, 2, 3, 4, 5, 6].map(num => args.style === \'tile\' ? <RadioButton.Button value={`option${num}`} key={num} disabled={args.disabled}>\n                        <Plus />\n                    </RadioButton.Button> : <RadioButton.Button key={num} value={`option${num}`} label={args.label ?? {\n      heading: `Option ${num}`,\n      description: `Description ${num}`\n    }} borderOn={args.borderOn} borderOnActive={args.borderOnActive} minWidth={args.minWidth} info={args.info} disabled={args.disabled} useSwitch={args.useSwitch} icon={args.icon ? <Smile /> : null} inlineIcon={args.inlineIcon} hideSelection={args.hideSelection} reversePosition={args.reversePosition} badgeItem={args.badgeItem ? <Badge type="rounded" label={args.badgeItem} icon={null} className="mr-2" size="sm" variant="green" closable={false} /> : null} />)}\n        </RadioButton.Group>;\n}',...SimpleRadioMulti.parameters?.docs?.source}}},TileRadio.parameters={...TileRadio.parameters,docs:{...TileRadio.parameters?.docs,source:{originalSource:'args => {\n  const [value, setValue] = useState(args.value || args.defaultValue);\n  return <RadioButton.Group {...args} value={value} columns={args.columns ?? args.style === \'tile\' ? 6 : 3} onChange={val => {\n    setValue(val);\n    args.onChange(val);\n  }}>\n            {[1, 2, 3, 4, 5, 6].map(num => args.style === \'tile\' ? <RadioButton.Button value={`option${num}`} key={num} disabled={args.disabled}>\n                        <Plus />\n                    </RadioButton.Button> : <RadioButton.Button key={num} value={`option${num}`} label={args.label ?? {\n      heading: `Option ${num}`,\n      description: `Description ${num}`\n    }} borderOn={args.borderOn} borderOnActive={args.borderOnActive} minWidth={args.minWidth} info={args.info} disabled={args.disabled} useSwitch={args.useSwitch} icon={args.icon ? <Smile /> : null} inlineIcon={args.inlineIcon} hideSelection={args.hideSelection} reversePosition={args.reversePosition} badgeItem={args.badgeItem ? <Badge type="rounded" label={args.badgeItem} icon={null} className="mr-2" size="sm" variant="green" closable={false} /> : null} />)}\n        </RadioButton.Group>;\n}',...TileRadio.parameters?.docs?.source}}},SimpleRadioSwitch.parameters={...SimpleRadioSwitch.parameters,docs:{...SimpleRadioSwitch.parameters?.docs,source:{originalSource:'args => {\n  const [value, setValue] = useState(args.value || args.defaultValue);\n  return <RadioButton.Group {...args} value={value} columns={args.columns ?? args.style === \'tile\' ? 6 : 3} onChange={val => {\n    setValue(val);\n    args.onChange(val);\n  }}>\n            {[1, 2, 3, 4, 5, 6].map(num => args.style === \'tile\' ? <RadioButton.Button value={`option${num}`} key={num} disabled={args.disabled}>\n                        <Plus />\n                    </RadioButton.Button> : <RadioButton.Button key={num} value={`option${num}`} label={args.label ?? {\n      heading: `Option ${num}`,\n      description: `Description ${num}`\n    }} borderOn={args.borderOn} borderOnActive={args.borderOnActive} minWidth={args.minWidth} info={args.info} disabled={args.disabled} useSwitch={args.useSwitch} icon={args.icon ? <Smile /> : null} inlineIcon={args.inlineIcon} hideSelection={args.hideSelection} reversePosition={args.reversePosition} badgeItem={args.badgeItem ? <Badge type="rounded" label={args.badgeItem} icon={null} className="mr-2" size="sm" variant="green" closable={false} /> : null} />)}\n        </RadioButton.Group>;\n}',...SimpleRadioSwitch.parameters?.docs?.source}}},SimpleRadioInline.parameters={...SimpleRadioInline.parameters,docs:{...SimpleRadioInline.parameters?.docs,source:{originalSource:'args => {\n  const [value, setValue] = useState(args.value || args.defaultValue);\n  return <RadioButton.Group {...args} value={value} columns={args.columns ?? args.style === \'tile\' ? 6 : 3} onChange={val => {\n    setValue(val);\n    args.onChange(val);\n  }}>\n            {[1, 2, 3, 4, 5, 6].map(num => args.style === \'tile\' ? <RadioButton.Button value={`option${num}`} key={num} disabled={args.disabled}>\n                        <Plus />\n                    </RadioButton.Button> : <RadioButton.Button key={num} value={`option${num}`} label={args.label ?? {\n      heading: `Option ${num}`,\n      description: `Description ${num}`\n    }} borderOn={args.borderOn} borderOnActive={args.borderOnActive} minWidth={args.minWidth} info={args.info} disabled={args.disabled} useSwitch={args.useSwitch} icon={args.icon ? <Smile /> : null} inlineIcon={args.inlineIcon} hideSelection={args.hideSelection} reversePosition={args.reversePosition} badgeItem={args.badgeItem ? <Badge type="rounded" label={args.badgeItem} icon={null} className="mr-2" size="sm" variant="green" closable={false} /> : null} />)}\n        </RadioButton.Group>;\n}',...SimpleRadioInline.parameters?.docs?.source}}},SimpleRadioWithInfo.parameters={...SimpleRadioWithInfo.parameters,docs:{...SimpleRadioWithInfo.parameters?.docs,source:{originalSource:'args => {\n  const [value, setValue] = useState(args.value || args.defaultValue);\n  return <RadioButton.Group {...args} value={value} columns={args.columns ?? args.style === \'tile\' ? 6 : 3} onChange={val => {\n    setValue(val);\n    args.onChange(val);\n  }}>\n            {[1, 2, 3, 4, 5, 6].map(num => args.style === \'tile\' ? <RadioButton.Button value={`option${num}`} key={num} disabled={args.disabled}>\n                        <Plus />\n                    </RadioButton.Button> : <RadioButton.Button key={num} value={`option${num}`} label={args.label ?? {\n      heading: `Option ${num}`,\n      description: `Description ${num}`\n    }} borderOn={args.borderOn} borderOnActive={args.borderOnActive} minWidth={args.minWidth} info={args.info} disabled={args.disabled} useSwitch={args.useSwitch} icon={args.icon ? <Smile /> : null} inlineIcon={args.inlineIcon} hideSelection={args.hideSelection} reversePosition={args.reversePosition} badgeItem={args.badgeItem ? <Badge type="rounded" label={args.badgeItem} icon={null} className="mr-2" size="sm" variant="green" closable={false} /> : null} />)}\n        </RadioButton.Group>;\n}',...SimpleRadioWithInfo.parameters?.docs?.source}}}},"./node_modules/lucide-react/dist/esm/icons/check.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return Check}});const Check=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]])},"./node_modules/lucide-react/dist/esm/icons/info.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return Info}});const Info=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("Info",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M12 16v-4",key:"1dtifu"}],["path",{d:"M12 8h.01",key:"e9boi3"}]])},"./node_modules/lucide-react/dist/esm/icons/plus.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return Plus}});const Plus=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("Plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]])},"./node_modules/lucide-react/dist/esm/icons/trash-2.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return Trash2}});const Trash2=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("Trash2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]])},"./node_modules/lucide-react/dist/esm/icons/triangle-alert.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return TriangleAlert}});const TriangleAlert=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("TriangleAlert",[["path",{d:"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",key:"wmoenq"}],["path",{d:"M12 9v4",key:"juzpu7"}],["path",{d:"M12 17h.01",key:"p32p05"}]])},"./node_modules/lucide-react/dist/esm/icons/x.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{A:function(){return X}});const X=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").A)("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]])},"./node_modules/nanoid/index.browser.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Ak:function(){return nanoid}});let nanoid=(size=21)=>{let id="",bytes=crypto.getRandomValues(new Uint8Array(size));for(;size--;)id+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[63&bytes[size]];return id}}}]);